{"version":3,"sources":["FilterInput.js","Table.js","App.js","API.js","serviceWorker.js","index.js"],"names":["FilterInput","users","updateUsers","useState","inputValue","updateInput","useEffect","filteredUsers","filter","name","first","toLowerCase","indexOf","value","onChange","e","target","Table","sortedUsers","updateSortedUsers","className","class","scope","onClick","updateSort","sort","a","b","nameA","nameB","map","location","city","state","thumbnail","picture","phone","email","last","key","src","App","initialUsers","updateAvailableUsers","usersToRender","updateUsersToRender","axios","get","then","results","data","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQAsBeA,EApBK,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAAkB,EACZC,mBAAS,IADG,mBACvCC,EADuC,KAC3BC,EAD2B,KAe9C,OAZAC,qBAAU,WACR,IAAMC,EACW,KAAfH,EACIH,EACAA,EAAMO,QACJ,qBAAGC,KAAQC,MACHC,cAAcC,QAAQR,EAAWO,gBAAkB,KAGnET,EAAYK,KACX,CAACH,EAAYH,IAGd,2BAAOY,MAAOT,EAAYU,SAAU,SAAAC,GAAC,OAAIV,EAAYU,EAAEC,OAAOH,W,QCwDnDI,EAxED,SAAC,GAAe,IAAbhB,EAAY,EAAZA,MAAY,EACcE,mBAAS,IADvB,mBACpBe,EADoB,KACPC,EADO,KAK3B,OAFAb,qBAAU,kBAAMa,EAAkBlB,KAAQ,CAACA,IAGzC,6BACE,2BAAOmB,UAAU,SACf,+BACE,wBAAIC,MAAM,eACV,wBAAIC,MAAM,QACR,wBAAID,MAAM,UACRC,MAAM,MACNC,QAAS,WACP,IACMC,EADS,YAAOvB,GACOwB,MAAK,SAACC,EAAGC,GACpC,IAAMC,EAAQF,EAAEjB,KAAKC,MACfmB,EAAQF,EAAElB,KAAKC,MAErB,OAAIkB,EAAQC,GACF,EAEND,EAAQC,EACH,EAGF,KAGTV,EAAkBK,KAlBtB,SAuBA,wBAAIF,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,WAMJ,+BACGJ,EAAYY,KACX,oBACEC,SAAYC,EADd,EACcA,KAAMC,EADpB,EACoBA,MACPC,EAFb,EAEEC,QAAWD,UACXE,EAHF,EAGEA,MACAC,EAJF,EAIEA,MAJF,IAKE5B,KAAQC,EALV,EAKUA,MAAO4B,EALjB,EAKiBA,KALjB,OAOE,wBAAKjB,MAAM,WAAWkB,IAAKF,GAEzB,4BAAI,yBAAKG,IAAKN,KACd,4BAAKxB,GACL,4BAAK4B,GACL,4BAAKD,GACL,4BAAKD,GACL,4BAAKJ,GACL,4BAAKC,W,uBChCNQ,MAzBf,WAAgB,IAAD,EACgCtC,mBAAS,IADzC,mBACNuC,EADM,KACQC,EADR,OAEgCxC,mBAAS,IAFzC,mBAENyC,EAFM,KAESC,EAFT,KAQb,OAJAvC,qBAAU,WCPHwC,IAAMC,IAAI,iDDQJC,MAAK,gBAAWC,EAAX,EAAGC,KAAQD,QAAX,OAA2BN,EAAqBM,QAC/D,IAGD,yBAAK7B,UAAU,OACb,kDACA,iFAEE,6BAFF,wEAMA,kBAAC,EAAD,CAAanB,MAAOyC,EAAcxC,YAAa2C,IAC/C,6BACA,6BACA,kBAAC,EAAD,CAAO5C,MAAO2C,MEdAO,QACa,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e500aaa3.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst FilterInput = ({ users, updateUsers }) => {\n  const [inputValue, updateInput] = useState(\"\");\n\n  useEffect(() => {\n    const filteredUsers =\n      inputValue === \"\"\n        ? users\n        : users.filter(\n            ({ name: { first } }) =>\n              first.toLowerCase().indexOf(inputValue.toLowerCase()) >= 0\n          );\n\n    updateUsers(filteredUsers);\n  }, [inputValue, users]);\n\n  return (\n    <input value={inputValue} onChange={e => updateInput(e.target.value)} />\n  );\n};\n\nexport default FilterInput;","import React, { useState, useEffect } from \"react\";\n\nconst Table = ({ users }) => {\n  const [sortedUsers, updateSortedUsers] = useState([]);\n\n  useEffect(() => updateSortedUsers(users), [users]);\n\n  return (\n    <div>\n      <table className=\"table\">\n        <thead>\n          <tr class=\"columnStyle\">\n          <th scope=\"col\"></th>\n            <th class=\"onHover\"\n              scope=\"col\"\n              onClick={() => {\n                const usersCopy = [...users];\n                const updateSort = usersCopy.sort((a, b) => {\n                  const nameA = a.name.first;\n                  const nameB = b.name.first;\n\n                  if (nameA < nameB) {\n                    return -1;\n                  }\n                  if (nameA > nameB) {\n                    return 1;\n                  }\n\n                  return 0;\n                });\n\n                updateSortedUsers(updateSort);\n              }}\n            >\n              First\n            </th>\n            <th scope=\"col\">Last</th>\n            <th scope=\"col\">email</th>\n            <th scope=\"col\">phone</th>            \n            <th scope=\"col\">city</th>\n            <th scope=\"col\">state</th>\n          \n           \n           \n          </tr>\n        </thead>\n        <tbody>\n          {sortedUsers.map(\n            ({\n              location: { city, state},\n              picture: { thumbnail },\n              phone,\n              email,\n              name: { first, last}\n            }) => (\n              <tr  class=\"rowStyle\" key={email}>\n                \n                <td><img src={thumbnail} /></td>\n                <th>{first}</th>\n                <td>{last}</td>\n                <td>{email}</td>\n                <td>{phone}</td>\n                <td>{city}</td>\n                <td>{state}</td>\n               \n              </tr>\n            )\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;","import React, { useEffect, useState } from \"react\";\nimport FilterInput from \"./FilterInput\";\nimport Table from \"./Table\";\nimport { getUsers } from \"./API\";\nimport \"./App.css\";\n\nfunction App() {\n  const [initialUsers, updateAvailableUsers] = useState([]);\n  const [usersToRender, updateUsersToRender] = useState([]);\n\n  useEffect(() => {\n    getUsers().then(({ data: { results } }) => updateAvailableUsers(results));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Employee Directory</h1>\n      <p>\n        Filter by first name by typing in user input below.\n        <br></br>\n        To sort from A-Z by first name click the \"First\" column header text.\n      </p>\n     \n      <FilterInput users={initialUsers} updateUsers={updateUsersToRender} />\n      <br></br>\n      <br></br>\n      <Table users={usersToRender} />\n    </div>\n  );\n}\n\nexport default App;","import axios from \"axios\";\n\nexport const getUsers = function() {\n  return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}